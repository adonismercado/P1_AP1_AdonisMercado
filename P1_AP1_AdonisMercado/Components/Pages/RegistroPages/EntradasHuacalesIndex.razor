@page "/EntradasHuacales/Index"

@inject EntradaHuacalesService entradaHuacalesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Index de Entradas de Huacales</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header d-flex justify-content-between align-items-center">
			<h5 class="card-title">Entradas Huacales</h5>
			<a href="/EntradasHuacales/Create" class="btn btn-success"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
		</div>

		<div class="card-body">
			@*Inputs y botones*@
			<div class="row align-items-center g-2">
				<!--Filtrar Por-->
				<div class="col-12 col-sm-6 col-md-2">
					<label class="col-form-label">Filtrar Por</label>
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="" selected disabled>Elija una opci&oacute;n</option>
						<option value="IdEntrada">IdEntrada</option>
						<option value="NombreCliente">NombreCliente</option>
						<option value="Cantidad">Cantidad</option>
						<option value="Precio">Precio</option>
					</InputSelect>
				</div>

				<!--Fecha Desde-->
				<div class="col-12 col-sm-6 col-md-2">
					<label class="col-form-label">Desde</label>
					<input type="date" class="form-control" @bind="FechaDesde" />
				</div>

				<!--Fecha Hasta-->
				<div class="col-12 col-sm-6 col-md-2">
					<label class="col-form-label">Hasta</label>
					<input type="date" class="form-control" @bind="FechaHasta" />
				</div>

				<!--Busqueda-->
				<div class="col col-sm-6 col-md-3">
					<label class="col-form-label">B&uacute;squeda</label>
					<div class="input-group">
						<input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
						<button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
					</div>
				</div>

				<div class="col-12 col-sm-6 col-md-2 mt-md-0">
					<label class="form-label d-none d-md-block">&nbsp</label>
					<button type="button" class="btn btn-outline-secondary w-100" @onclick="LimpiarFiltros">
						<span class="bi bi-x-circle"></span>
					</button>
				</div>
			</div>

			<div class="table-responsive mt-3">
				<table class="table table-hover text-center align-middle">
					<thead class="table table-striped text-black">
						<tr>
							<th>Fecha</th>
							<th>Id Entrada</th>
							<th>Nombre Cliente</th>
							<th>Cantidad</th>
							<th>Precio</th>
							<th>Importe</th>
							<th>Opciones</th>
						</tr>
					</thead>

					<tbody>
						@foreach (var entradasHuacales in ListaEntradasHuacales)
						{
							<tr>
								<td>@entradasHuacales.Fecha.ToString("MM/dd/yyyy")</td>
								<td>@entradasHuacales.IdEntrada</td>
								<td>@entradasHuacales.NombreCliente</td>
								<td>@entradasHuacales.Cantidad</td>
								<td>@entradasHuacales.Precio</td>
								<td>@(entradasHuacales.Cantidad* entradasHuacales.Precio)</td>
								<td>
									<a href="/EntradasHuacales/Detalles/@entradasHuacales.IdEntrada" class="btn btn-outline-success">
										<span class="bi bi-eye"></span>
									</a>
									<a href="/EntradasHuacales/Edit/@entradasHuacales.IdEntrada" class="btn btn-outline-dark">
										<span class="bi bi-pencil"></span>
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<div class="card-footer text-center">
			<div class="row">
				<div class="col-6">
					<label>Cantidad de Huacales ingresados: @ListaEntradasHuacales.Sum(e => e.Cantidad)</label>
				</div>
				<div class="col-6">
					<label>Total de Importe: @ListaEntradasHuacales.Sum(e => e.Cantidad * e.Precio)</label>
				</div>
			</div>
		</div>
	</div>
</div>
@code {
	public List<EntradasHuacales> ListaEntradasHuacales { get; set; } = new List<EntradasHuacales>();
	public string Filtro { get; set; }
	public string ValorFiltro { get; set; }
	public DateTime? FechaDesde { get; set; }
	public DateTime? FechaHasta { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.IdEntrada > 0);
	}

	public async Task Buscar()
	{
		if (FechaDesde.HasValue && FechaHasta.HasValue)
		{
			ListaEntradasHuacales = await entradaHuacalesService.Listar(
				e => e.Fecha.Date >= FechaDesde.Value.Date && e.Fecha.Date <= FechaHasta.Value.Date);
		}
		else if (FechaDesde.HasValue)
		{
			ListaEntradasHuacales = await entradaHuacalesService.Listar(
				e => e.Fecha.Date >= FechaDesde.Value.Date);
		}
		else if (FechaHasta.HasValue)
		{
			ListaEntradasHuacales = await entradaHuacalesService.Listar(
				e => e.Fecha.Date <= FechaHasta.Value.Date);
		}

		if (!string.IsNullOrWhiteSpace(ValorFiltro))
		{
			if (Filtro == "IdEntrada" && int.TryParse(ValorFiltro, out var idEntrada))
			{
				ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.IdEntrada == idEntrada);
			}

			if (Filtro == "NombreCliente")
			{
				ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.NombreCliente.ToLower().Contains(ValorFiltro));
			}

			if (Filtro == "Cantidad" && int.TryParse(ValorFiltro, out var cantidad))
			{
				ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.Cantidad == cantidad);
			}

			if (Filtro == "Precio" && decimal.TryParse(ValorFiltro, out var precio))
			{
				ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.Precio == precio);
			}
		}
	}

	public async Task LimpiarFiltros()
	{
		Filtro = string.Empty;
		ValorFiltro = string.Empty;
		FechaDesde = null;
		FechaHasta = null;
		ListaEntradasHuacales = await entradaHuacalesService.Listar(e => e.IdEntrada > 0);
	}
}
