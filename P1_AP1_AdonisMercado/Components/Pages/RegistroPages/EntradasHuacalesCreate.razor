@page "/EntradasHuacales/Create"
@inject IDbContextFactory<Contexto> DbFactory
@inject EntradaHuacalesService entradasHuacalesService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Crear Entrada de Huacal</PageTitle>
<EditForm Model="EntradasHuacales" OnSubmit="Guardar" FormName="CrearEntradaHuacal">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Crear Entrada de Huacal</h5>
			</div>

			<div class="card-body">
				<div class="mb-3">
					<label class="form-label">Fecha</label>
					<InputDate class="form-control" @bind-Value="EntradasHuacales.Fecha"></InputDate>
					<ValidationMessage For="(() => EntradasHuacales.Fecha)" />
				</div>

				<div class="mb-3">
					<label class="form-label">IdEntrada</label>
					<InputNumber class="form-control bg-light text-secondary" @bind-Value="EntradasHuacales.IdEntrada" readonly></InputNumber>
					<ValidationMessage For="(() => EntradasHuacales.IdEntrada)" />
				</div>

				<div class="mb-3">
					<label class="form-label">NombreCliente</label>
					<InputText class="form-control" @bind-Value="EntradasHuacales.NombreCliente"></InputText>
					<ValidationMessage For="(() => EntradasHuacales.NombreCliente)" />
				</div>

				@*Detalles de Huacales*@
				<div class="border border-success p-3 mt-3">
					<h5>Detalles de Huacales</h5>

					<TipoHuacalPicker TiposHuacales="ListaTiposHuacales"
									  TipoId="DetalleSeleccionado.TipoId"
									  Cantidad="DetalleSeleccionado.Cantidad"
									  Precio="DetalleSeleccionado.Precio"
									  OnTipoSeleccionado="HandleTipoSeleccionado" />
					<hr />
					<table class="table table-light table-bordered table-hover">
						<thead>
							<tr class="text-center">
								<th>Tipo Huacal</th>
								<th>Cantidad</th>
								<th>Precio</th>
								<th>Importe</th>
								<th>Remover</th>
							</tr>
						</thead>

						<tbody class="text-center">
							@foreach (var detalle in EntradasHuacales.DetalleHuacales)
							{
								<tr>
									<td>@ListaTiposHuacales.FirstOrDefault(t => t.TipoId == detalle.TipoId)?.Descripcion</td>
									<td>@detalle.Cantidad</td>
									<td>@detalle.Precio</td>
									<td>@(detalle.Cantidad* detalle.Precio)</td>
									<td>
										<button type="button" class="btn btn-outline-dark bi bi-trash"
												@onclick="() => RemoverDetalle(detalle)">
											Remover
										</button>
									</td>
								</tr>
							}
						</tbody>
						<hr />

						@*Total del Importe*@
						<div class="mb-3">
							<label class="form-label"><strong>Importe Total:</strong></label>
							<input class="form-control bg-light text-secondary" value="@EntradasHuacales.DetalleHuacales.Sum(d => d.Cantidad * d.Precio)" readonly />
						</div>
					</table>
				</div>

				@if (!string.IsNullOrWhiteSpace(errorMensaje))
				{
					<div class="alert alert-danger">@errorMensaje</div>
				}
			</div>

			<div class="card-footer text-center">
				<a href="/EntradasHuacales/Index" class="btn btn-secondary">
					<span class="bi bi-arrow-left"></span> Volver
				</a>

				<button type="submit" class="btn btn-primary bi bi-save"> Guardar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	public EntradasHuacales EntradasHuacales { get; set; } = new EntradasHuacales();
	public EntradasHuacalesDetalle DetalleSeleccionado { get; set; } = new();
	public List<TiposHuacales> ListaTiposHuacales { get; set; } = new();
	public string errorMensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ListaTiposHuacales = await entradasHuacalesService.ListarTiposHuacales();
		EntradasHuacales.Fecha = DateTime.Now;
	}

	private async Task HandleTipoSeleccionado((TiposHuacales tipo, int cantidad, decimal precio) selection)
	{
		var detalle = new EntradasHuacalesDetalle
		{
			TipoId = selection.tipo.TipoId,
			Cantidad = selection.cantidad,
			Precio = selection.precio,
		};

		EntradasHuacales.DetalleHuacales.Add(detalle);

		DetalleSeleccionado = new EntradasHuacalesDetalle();
		await Task.CompletedTask;
	}

	public async Task Guardar()
	{
		if (EntradasHuacales.NombreCliente == null)
		{
			errorMensaje = "El nombre no puede ser vacio";
		}
		var creado = await entradasHuacalesService.Guardar(EntradasHuacales);

		if (creado)
		{
			toastService.ShowSuccess("Entrada guardada correctamente!");
			navigationManager.NavigateTo("/EntradasHuacales/Index");
		}
		else
		{
			errorMensaje = "No se pudo registrar la entrada correctamente.";
		}
	}

	private void RemoverDetalle(EntradasHuacalesDetalle detalle)
	{
		EntradasHuacales.DetalleHuacales.Remove(detalle);
		DetalleSeleccionado = detalle;
	}
}
